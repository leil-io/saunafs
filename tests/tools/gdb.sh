coredump_enabled_=
coredump_dir="/tmp/temp-cores/"
coredump_dir_after="/tmp/sfs-cores/"
coredump_pattern="${coredump_dir}core-%e-%p-%t"
coredump_original_pattern="$(< /proc/sys/kernel/core_pattern)"
coredump_pattern_restore=1


coredump_setup() {
	if valgrind_enabled; then
		return
	fi

	mkdir -p ${coredump_dir}
	chmod 777 "${coredump_dir}"
	if [ "${coredump_original_pattern}" = "${coredump_pattern}" ]; then
		echo "Core pattern is already set, not modifying it"
		coredump_enabled_=1
		coredump_pattern_restore=0
		return
	fi

	echo ${coredump_pattern} | sudo tee /proc/sys/kernel/core_pattern || echo "Could not setup coredump" && return
	coredump_enabled_ = 1
}

coredump_exists() {
	test -n "$(ls -1qA "${coredump_dir}" 2>/dev/null)"
}

coredump_is_enabled() {
	parse_true "${coredump_enabled_}"
}

coredump_watcher() {
	inotifywait -m "${coredump_dir}" -e create -e moved_to |
	while read path action file; do
		test_add_failure " --- CORE DUMP DETECTED, TERMINATING TEST ---"
		test_freeze_result
		coredump_analyze
		coredump_restore
		killall -9 -u $(whoami)
	done
}

coredump_analyze() {
	mkdir "${coredump_dir_after}"
	for core in "${coredump_dir}"/core*; do
		echo " --- CORE DUMP BACKTRACE: ${core} --- "
		executable=$(gdb -ex "core-file ${core}" -ex "info proc" -ex "quit" \
			| grep 'Core was generated by' \
			| sed "s/Core was generated by \`\\(.*\\)'\./\\1/" \
			| awk '{print $1}') 2> /dev/null

		gdb -batch -ex "core-file ${core}" -ex "thread apply all bt full" -ex "quit" ${executable} 2> /dev/null
		echo " --- CORE DUMP FINISHED FOR: ${core} --- "
		mv "${core}" "${coredump_dir_after}"
	done
}

coredump_restore() {
	if parse_true "${coredump_pattern_restore}"; then
		echo ${coredump_original_pattern} > /proc/sys/kernel/core_pattern || true
	fi
}
